FILE_BUFFER_SIZE = 4096

S = [
    0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
    0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
    0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
    0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
    0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
    0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
    0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
    0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
    0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
    0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
    0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
    0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
    0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
    0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
    0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
    0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
]

P = [
    0, 8, 16, 24, 32, 40, 48, 56,
    1, 9, 17, 25, 33, 41, 49, 57,
    2, 10, 18, 26, 34, 42, 50, 58,
    3, 11, 19, 27, 35, 43, 51, 59,
    4, 12, 20, 28, 36, 44, 52, 60,
    5, 13, 21, 29, 37, 45, 53, 61,
    6, 14, 22, 30, 38, 46, 54, 62,
    7, 15, 23, 31, 39, 47, 55, 63
]

A = [
    0x8e20faa72ba0b470, 0x47107ddd9b505a38, 0xad08b0e0c3282d1c, 0xd8045870ef14980e,
    0x6c022c38f90a4c07, 0x3601161cf205268d, 0x1b8e0b0e798c13c8, 0x83478b07b2468764,
    0xa011d380818e8f40, 0x5086e740ce47c920, 0x2843fd2067adea10, 0x14aff010bdd87508,
    0x0ad97808d06cb404, 0x05e23c0468365a02, 0x8c711e02341b2d01, 0x46b60f011a83988e,
    0x90dab52a387ae76f, 0x486dd4151c3dfdb9, 0x24b86a840e90f0d2, 0x125c354207487869,
    0x092e94218d243cba, 0x8a174a9ec8121e5d, 0x4585254f64090fa0, 0xaccc9ca9328a8950,
    0x9d4df05d5f661451, 0xc0a878a0a1330aa6, 0x60543c50de970553, 0x302a1e286fc58ca7,
    0x18150f14b9ec46dd, 0x0c84890ad27623e0, 0x0642ca05693b9f70, 0x0321658cba93c138,
    0x86275df09ce8aaa8, 0x439da0784e745554, 0xafc0503c273aa42a, 0xd960281e9d1d5215,
    0xe230140fc0802984, 0x71180a8960409a42, 0xb60c05ca30204d21, 0x5b068c651810a89e,
    0x456c34887a3805b9, 0xac361a443d1c8cd2, 0x561b0d22900e4669, 0x2b838811480723ba,
    0x9bcf4486248d9f5d, 0xc3e9224312c8c1a0, 0xeffa11af0964ee50, 0xf97d86d98a327728,
    0xe4fa2054a80b329c, 0x727d102a548b194e, 0x39b008152acb8227, 0x9258048415eb419d,
    0x492c024284fbaec0, 0xaa16012142f35760, 0x550b8e9e21f7a530, 0xa48b474f9ef5dc18,
    0x70a6a56e2440598e, 0x3853dc371220a247, 0x1ca76e95091051ad, 0x0edd37c48a08a6d8,
    0x07e095624504536c, 0x8d70c431ac02a736, 0xc83862965601dd1b, 0x641c314b2b8ee083
]

C = [
    [
    0xb1,0x08,0x5b,0xda,0x1e,0xca,0xda,0xe9,0xeb,0xcb,0x2f,0x81,0xc0,0x65,0x7c,0x1f,
    0x2f,0x6a,0x76,0x43,0x2e,0x45,0xd0,0x16,0x71,0x4e,0xb8,0x8d,0x75,0x85,0xc4,0xfc,
    0x4b,0x7c,0xe0,0x91,0x92,0x67,0x69,0x01,0xa2,0x42,0x2a,0x08,0xa4,0x60,0xd3,0x15,
    0x05,0x76,0x74,0x36,0xcc,0x74,0x4d,0x23,0xdd,0x80,0x65,0x59,0xf2,0xa6,0x45,0x07
    ],
    [
    0x6f,0xa3,0xb5,0x8a,0xa9,0x9d,0x2f,0x1a,0x4f,0xe3,0x9d,0x46,0x0f,0x70,0xb5,0xd7,
    0xf3,0xfe,0xea,0x72,0x0a,0x23,0x2b,0x98,0x61,0xd5,0x5e,0x0f,0x16,0xb5,0x01,0x31,
    0x9a,0xb5,0x17,0x6b,0x12,0xd6,0x99,0x58,0x5c,0xb5,0x61,0xc2,0xdb,0x0a,0xa7,0xca,
    0x55,0xdd,0xa2,0x1b,0xd7,0xcb,0xcd,0x56,0xe6,0x79,0x04,0x70,0x21,0xb1,0x9b,0xb7
    ],
    [
    0xf5,0x74,0xdc,0xac,0x2b,0xce,0x2f,0xc7,0x0a,0x39,0xfc,0x28,0x6a,0x3d,0x84,0x35,
    0x06,0xf1,0x5e,0x5f,0x52,0x9c,0x1f,0x8b,0xf2,0xea,0x75,0x14,0xb1,0x29,0x7b,0x7b,
    0xd3,0xe2,0x0f,0xe4,0x90,0x35,0x9e,0xb1,0xc1,0xc9,0x3a,0x37,0x60,0x62,0xdb,0x09,
    0xc2,0xb6,0xf4,0x43,0x86,0x7a,0xdb,0x31,0x99,0x1e,0x96,0xf5,0x0a,0xba,0x0a,0xb2
    ],
    [
    0xef,0x1f,0xdf,0xb3,0xe8,0x15,0x66,0xd2,0xf9,0x48,0xe1,0xa0,0x5d,0x71,0xe4,0xdd,
    0x48,0x8e,0x85,0x7e,0x33,0x5c,0x3c,0x7d,0x9d,0x72,0x1c,0xad,0x68,0x5e,0x35,0x3f,
    0xa9,0xd7,0x2c,0x82,0xed,0x03,0xd6,0x75,0xd8,0xb7,0x13,0x33,0x93,0x52,0x03,0xbe,
    0x34,0x53,0xea,0xa1,0x93,0xe8,0x37,0xf1,0x22,0x0c,0xbe,0xbc,0x84,0xe3,0xd1,0x2e
    ],
    [
    0x4b,0xea,0x6b,0xac,0xad,0x47,0x47,0x99,0x9a,0x3f,0x41,0x0c,0x6c,0xa9,0x23,0x63,
    0x7f,0x15,0x1c,0x1f,0x16,0x86,0x10,0x4a,0x35,0x9e,0x35,0xd7,0x80,0x0f,0xff,0xbd,
    0xbf,0xcd,0x17,0x47,0x25,0x3a,0xf5,0xa3,0xdf,0xff,0x00,0xb7,0x23,0x27,0x1a,0x16,
    0x7a,0x56,0xa2,0x7e,0xa9,0xea,0x63,0xf5,0x60,0x17,0x58,0xfd,0x7c,0x6c,0xfe,0x57
    ],
    [
    0xae,0x4f,0xae,0xae,0x1d,0x3a,0xd3,0xd9,0x6f,0xa4,0xc3,0x3b,0x7a,0x30,0x39,0xc0,
    0x2d,0x66,0xc4,0xf9,0x51,0x42,0xa4,0x6c,0x18,0x7f,0x9a,0xb4,0x9a,0xf0,0x8e,0xc6,
    0xcf,0xfa,0xa6,0xb7,0x1c,0x9a,0xb7,0xb4,0x0a,0xf2,0x1f,0x66,0xc2,0xbe,0xc6,0xb6,
    0xbf,0x71,0xc5,0x72,0x36,0x90,0x4f,0x35,0xfa,0x68,0x40,0x7a,0x46,0x64,0x7d,0x6e
    ],
    [
    0xf4,0xc7,0x0e,0x16,0xee,0xaa,0xc5,0xec,0x51,0xac,0x86,0xfe,0xbf,0x24,0x09,0x54,
    0x39,0x9e,0xc6,0xc7,0xe6,0xbf,0x87,0xc9,0xd3,0x47,0x3e,0x33,0x19,0x7a,0x93,0xc9,
    0x09,0x92,0xab,0xc5,0x2d,0x82,0x2c,0x37,0x06,0x47,0x69,0x83,0x28,0x4a,0x05,0x04,
    0x35,0x17,0x45,0x4c,0xa2,0x3c,0x4a,0xf3,0x88,0x86,0x56,0x4d,0x3a,0x14,0xd4,0x93
    ],
    [
    0x9b,0x1f,0x5b,0x42,0x4d,0x93,0xc9,0xa7,0x03,0xe7,0xaa,0x02,0x0c,0x6e,0x41,0x41,
    0x4e,0xb7,0xf8,0x71,0x9c,0x36,0xde,0x1e,0x89,0xb4,0x44,0x3b,0x4d,0xdb,0xc4,0x9a,
    0xf4,0x89,0x2b,0xcb,0x92,0x9b,0x06,0x90,0x69,0xd1,0x8d,0x2b,0xd1,0xa5,0xc4,0x2f,
    0x36,0xac,0xc2,0x35,0x59,0x51,0xa8,0xd9,0xa4,0x7f,0x0d,0xd4,0xbf,0x02,0xe7,0x1e
    ],
    [
    0x37,0x8f,0x5a,0x54,0x16,0x31,0x22,0x9b,0x94,0x4c,0x9a,0xd8,0xec,0x16,0x5f,0xde,
    0x3a,0x7d,0x3a,0x1b,0x25,0x89,0x42,0x24,0x3c,0xd9,0x55,0xb7,0xe0,0x0d,0x09,0x84,
    0x80,0x0a,0x44,0x0b,0xdb,0xb2,0xce,0xb1,0x7b,0x2b,0x8a,0x9a,0xa6,0x07,0x9c,0x54,
    0x0e,0x38,0xdc,0x92,0xcb,0x1f,0x2a,0x60,0x72,0x61,0x44,0x51,0x83,0x23,0x5a,0xdb
    ],
    [
    0xab,0xbe,0xde,0xa6,0x80,0x05,0x6f,0x52,0x38,0x2a,0xe5,0x48,0xb2,0xe4,0xf3,0xf3,
    0x89,0x41,0xe7,0x1c,0xff,0x8a,0x78,0xdb,0x1f,0xff,0xe1,0x8a,0x1b,0x33,0x61,0x03,
    0x9f,0xe7,0x67,0x02,0xaf,0x69,0x33,0x4b,0x7a,0x1e,0x6c,0x30,0x3b,0x76,0x52,0xf4,
    0x36,0x98,0xfa,0xd1,0x15,0x3b,0xb6,0xc3,0x74,0xb4,0xc7,0xfb,0x98,0x45,0x9c,0xed
    ],
    [
    0x7b,0xcd,0x9e,0xd0,0xef,0xc8,0x89,0xfb,0x30,0x02,0xc6,0xcd,0x63,0x5a,0xfe,0x94,
    0xd8,0xfa,0x6b,0xbb,0xeb,0xab,0x07,0x61,0x20,0x01,0x80,0x21,0x14,0x84,0x66,0x79,
    0x8a,0x1d,0x71,0xef,0xea,0x48,0xb9,0xca,0xef,0xba,0xcd,0x1d,0x7d,0x47,0x6e,0x98,
    0xde,0xa2,0x59,0x4a,0xc0,0x6f,0xd8,0x5d,0x6b,0xca,0xa4,0xcd,0x81,0xf3,0x2d,0x1b
    ],
    [
    0x37,0x8e,0xe7,0x67,0xf1,0x16,0x31,0xba,0xd2,0x13,0x80,0xb0,0x04,0x49,0xb1,0x7a,
    0xcd,0xa4,0x3c,0x32,0xbc,0xdf,0x1d,0x77,0xf8,0x20,0x12,0xd4,0x30,0x21,0x9f,0x9b,
    0x5d,0x80,0xef,0x9d,0x18,0x91,0xcc,0x86,0xe7,0x1d,0xa4,0xaa,0x88,0xe1,0x28,0x52,
    0xfa,0xf4,0x17,0xd5,0xd9,0xb2,0x1b,0x99,0x48,0xbc,0x92,0x4a,0xf1,0x1b,0xd7,0x20
    ]
]

class GOSTHashContext:
    def __init__(self):
        self.buffer = bytearray(64)  # Буфер для очередного блока хешируемого сообщения
        self.hash = bytearray(64)  # Итоговый результат (может быть 64 байта для 512-битного хеша)
        self.h = bytearray(64)  # Промежуточный результат
        self.N = bytearray(64)  # Дополнительный вектор N (если нужно)
        self.Sigma = bytearray(64)  # Контрольная сумма
        self.v_0 = bytearray(64)  # Инициализационный вектор для h
        self.v_512 = bytearray(64)  # Инициализационный вектор для v_512
        self.buf_size = 0  # Размер оставшейся части сообщения
        self.hash_size = 512  # Размер хеш-суммы по умолчанию 512 бит

    def print(self):
        print("GOST Hash Context:")
        print(f"buffer      : {self._bytes_to_hex(self.buffer)}")
        print(f"hash        : {self._bytes_to_hex(self.hash)}")
        print(f"h           : {self._bytes_to_hex(self.h)}")
        print(f"N           : {self._bytes_to_hex(self.N)}")
        print(f"Sigma       : {self._bytes_to_hex(self.Sigma)}")
        print(f"v_0         : {self._bytes_to_hex(self.v_0)}")
        print(f"v_512       : {self._bytes_to_hex(self.v_512)}")
        print(f"buf_size    : {self.buf_size}")
        print(f"hash_size   : {self.hash_size}")

    def set_h(self, h):
        print(f"updating h: {h}")
        self.h = h


    # Вспомогательный метод для преобразования байтов в строку hex
    def _bytes_to_hex(self, byte_array):
        return ' '.join(f'{b:02x}' for b in byte_array)

def gost_hash_x(a: bytearray, b: bytearray) -> bytearray:
    # Проверим, что оба входных блока имеют размер 64 байта
    if len(a) != 64 or len(b) != 64:
        raise ValueError("Both input arrays must be 64 bytearray long")

    # Результирующий блок, в который будет записан результат
    c = bytearray(64)

    # Применяем побитовый XOR для каждого байта
    for i in range(64):
        c[i] = a[i] ^ b[i]  # XOR соответствующих байтов

    return c

def gost_hash_add_512(a: bytearray, b: bytearray) -> bytearray:
    # Проверим, что оба входных блока имеют размер 64 байта
    if len(a) != 64 or len(b) != 64:
        raise ValueError("Both input arrays must be 64 bytes long")

    # Результирующий блок, в который будет записан результат
    c = bytearray(64)

    # Переменная для учёта переноса
    internal = 0

    # Производим побитовое сложение с учётом переноса
    for i in range(64):
        internal = a[i] + b[i] + (internal >> 8)  # складываем байты и учитываем перенос
        c[i] = internal & 0xff  # сохраняем только младший байт (переполнение отбрасывается)

    return c  # Возвращаем результат как неизменяемый тип bytes

# Функция GOSTHashS
def gost_hash_s(state: bytearray):
    # print("before: ")
    # print(state)
    # Создаем новый массив для хранения результата
    internal = bytearray(64)

    # Проходим по каждому элементу в обратном порядке и применяем Pi
    for i in range(63, -1, -1):
        internal[i] = S[state[i]]  # Применяем замену по таблице Pi

    # Записываем результат обратно в state
    state[:] = internal
    # print("after: ")
    # print(state)

# Функция GOSTHashP
def gost_hash_p(state: bytearray):
    # Создаем новый массив для хранения результата
    internal = bytearray(64)

    # Проходим по каждому элементу и переставляем байты согласно таблице Tau
    for i in range(63, -1, -1):
        internal[i] = state[P[i]]  # Переставляем байт по индексу Tau[i]

    # Записываем результат обратно в state
    state[:] = internal

# Функция GOSTHashL
def gost_hash_l(state: bytearray):
    # Преобразуем вектор state в 8 64-битных чисел
    internal_in = [int.from_bytes(state[i:i + 8], 'big') for i in range(0, 64, 8)]

    # Инициализируем internal_out нулями
    internal_out = [0] * 8

    # Процесс XOR с матрицей A
    for i in range(7, -1, -1):  # Идем по элементам internal_in в обратном порядке
        for j in range(63, -1, -1):  # Идем по битам каждого элемента
            if (internal_in[i] >> j) & 1:  # Проверяем, если бит равен 1
                internal_out[i] ^= A[63 - j]  # Ксорим с элементом из A

    # Переводим результат обратно в байтовый массив state
    for i in range(8):
        state[i * 8:(i + 1) * 8] = internal_out[i].to_bytes(8, 'big')

def gost_hash_get_key(K, i):
    K = gost_hash_x(K, C[i])
    gost_hash_s(K)
    gost_hash_p(K)
    gost_hash_l(K)

def gost_hash_e(K, m, state):
    print("hash e before")
    print(state)
    # 1. XOR с m и K, результат в state
    state = gost_hash_x(m, K)

    # 1. 12 итераций
    for i in range(12):
        # Преобразования S, P и L
        gost_hash_s(state)
        gost_hash_p(state)
        gost_hash_l(state)

        # Вычисление нового ключа K с помощью gost_hash_getKey
        gost_hash_get_key(K, i)

        # XOR между состоянием и ключом, результат в state
        state = gost_hash_x(state, K)

    print("hash e after")
    print(state)
    return state

def gost_hash_g(h, N, m):
    # 1. XOR между N и h, результат в K
    K = bytearray(len(h))
    K = gost_hash_x(N, h)

    # 2. Преобразования S, P, L на K
    gost_hash_s(K)
    gost_hash_p(K)
    gost_hash_l(K)

    # 3. Вычисление функции E
    internal = bytearray(len(K))  # Промежуточный вектор
    internal = gost_hash_e(K, m, internal)

    print("internal before xor")
    print(internal)
    print(m)
    # 4. Два XOR: сначала с h, затем с m
    internal = gost_hash_x(internal, h)

    print("internal after xor")
    print(internal)
    h = gost_hash_x(internal, m)
    return h

def gost_hash_padding(ctx: GOSTHashContext):
    if ctx.buf_size < 64:  # Если размер буфера меньше 64 байт
        internal = bytearray(64)  # Промежуточный вектор длиной 64 байта
        internal[:ctx.buf_size] = ctx.buffer[:ctx.buf_size]  # Копируем остаток сообщения
        internal[ctx.buf_size] = 0x01  # Добавляем единичку в соответствующее место
        ctx.buffer = internal  # Копируем результат обратно в буфер

def gost_hash_init(ctx: GOSTHashContext, hash_size):
    # Обнуляем все поля контекста
    ctx.buffer = bytearray(64)  # Буфер для блока данных (64 байта)
    ctx.hash = bytearray(64)    # Итоговая хеш-сумма
    ctx.set_h(bytearray(64))       # Промежуточный вектор
    ctx.N = bytearray(64)       # Вектор N
    ctx.Sigma = bytearray(64)   # Контрольная сумма
    ctx.v_0 = bytearray(64)     # Инициализационный вектор
    ctx.v_512 = bytearray(64)   # Инициализационный вектор для 512 бит
    ctx.buf_size = 0            # Размер оставшегося блока
    ctx.hash_size = hash_size   # Размер хеш-суммы

    # Инициализация хеш-суммы
    if hash_size == 256:
        ctx.h[:32] = bytes([0x01] * 32)  # Для хеша 256 бит первые 32 байта единички
    else:
        ctx.set_h(bytearray(64))  # Для хеша 512 бит все байты нули

    # Инициализация вектора v_512
    ctx.v_512[1] = 0x02  # Устанавливаем второй байт в 0x02


def gost_hash_stage_2(ctx: GOSTHashContext, data):
    # Применяем функцию gost_hash_g
    ctx.h = gost_hash_g(ctx.h, ctx.N, data)

    # Добавляем v_512 к N
    print("before: ")
    print(ctx.N)
    ctx.N = gost_hash_add_512(ctx.N, ctx.v_512)
    print("after: ")
    print(ctx.N)
    # Обновляем контрольную сумму Sigma
    ctx.Sigma = gost_hash_add_512(ctx.Sigma, data)

def gost_hash_stage_3(ctx: GOSTHashContext):
    print("stage 3")
    ctx.print()
    # Создаем внутренний вектор для размера сообщения
    internal = bytearray(64)
    internal[1] = ((ctx.buf_size * 8) >> 8) & 0xff
    internal[0] = (ctx.buf_size * 8) & 0xff

    # Дополняем оставшуюся часть сообщения до полных 64 байт
    gost_hash_padding(ctx)
    # Применяем функцию gost_hash_g
    ctx.h = gost_hash_g(ctx.h, ctx.N, ctx.buffer)

    # Формируем контрольную сумму сообщения
    ctx.N = gost_hash_add_512(ctx.N, internal)
    ctx.Sigma = gost_hash_add_512(ctx.Sigma, ctx.buffer)

    print("after N + Sigma")
    ctx.print()

    # Два вызова gost_hash_g с v_0
    ctx.h = gost_hash_g(ctx.h, ctx.v_0, ctx.N)
    ctx.h = gost_hash_g(ctx.h, ctx.v_0, ctx.Sigma)

    print("after 2 g calls")
    ctx.print()
    # Записываем результат в нужное место
    ctx.hash[:64] = ctx.h[:64]

def gost_hash_update(ctx: GOSTHashContext, data):
    len_data = len(data)
    print("update. len: " + str(len_data))

    # Обрабатываем полные блоки по 64 байта
    while len_data > 63 and ctx.buf_size == 0:
        gost_hash_stage_2(ctx, data[:64])  # Обработка полного блока данных
        data = data[64:]  # Оставляем оставшиеся данные
        len_data -= 64

    # Обрабатываем оставшиеся данные
    while len_data > 0:
        chk_size = 64 - ctx.buf_size  # Размер незаполненной части буфера
        if chk_size > len_data:
            chk_size = len_data  # Если данных осталось меньше, чем место в буфере

        # Копируем часть данных в буфер
        ctx.buffer[ctx.buf_size:ctx.buf_size + chk_size] = data[:chk_size]
        ctx.buf_size += chk_size  # Увеличиваем размер буфера
        data = data[chk_size:]  # Оставшиеся данные
        len_data -= chk_size  # Уменьшаем оставшуюся длину данных

        # Когда буфер заполняется, обрабатываем его
        if ctx.buf_size == 64:
            gost_hash_stage_2(ctx, ctx.buffer)
            ctx.buf_size = 0  # Сбрасываем буфер после обработки

def gost_hash_final(ctx: GOSTHashContext):
    print("final")
    gost_hash_stage_3(ctx)
    ctx.buf_size = 0


def calculate_file_hash(file_path, hash_size=512):
    # Открываем файл для чтения в бинарном режиме
    with open(file_path, 'rb') as file:
        # Создаем контекст хеширования
        ctx = GOSTHashContext()
        ctx.hash_size = hash_size
        gost_hash_init(ctx, hash_size)

        # Чтение и обработка файла
        while True:
            buffer = bytearray(file.read(FILE_BUFFER_SIZE))  # Читаем данные из файла
            if not buffer:
                break  # Достигнут конец файла
            gost_hash_update(ctx, buffer)  # Обновляем хеш с помощью прочитанных данных

        # Финализируем хеширование
        gost_hash_final(ctx)

        # Возвращаем хеш-сумму как результат
        return ctx.hash


# Пример использования:
file_path = 'input.txt'
hash_result = calculate_file_hash(file_path, hash_size=512)

# Выводим хеш в шестнадцатеричном виде
print("Hash (hex):", ''.join(f'{byte:02x}' for byte in hash_result))